{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2de2be38",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:50: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:54: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:59: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:63: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:73: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:50: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:54: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:59: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:63: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:73: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "C:\\Users\\srihari\\AppData\\Local\\Temp\\ipykernel_9184\\3930841227.py:50: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  if user is 1:\n",
      "C:\\Users\\srihari\\AppData\\Local\\Temp\\ipykernel_9184\\3930841227.py:54: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  elif user is 2:\n",
      "C:\\Users\\srihari\\AppData\\Local\\Temp\\ipykernel_9184\\3930841227.py:59: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  elif user is 3:\n",
      "C:\\Users\\srihari\\AppData\\Local\\Temp\\ipykernel_9184\\3930841227.py:63: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  elif user is 4:\n",
      "C:\\Users\\srihari\\AppData\\Local\\Temp\\ipykernel_9184\\3930841227.py:73: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  if user_input is 1:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\t\t **Welcome to Library** \t\t\n",
      "\n",
      "what you want you do?\n",
      "Press 1 to display the books in the library.\n",
      "Press 2 to lend a book from library.\n",
      "Press 3 to return a book.(Return the book in given time to ignore late fine)\n",
      "Press 4 to add a book.\n",
      "1\n",
      "Srihari Rajagopal library has: \n",
      "python\n",
      "Let us C\n",
      "C++\n",
      "compiler design\n",
      "java\n",
      "web designing\n",
      "Want something more?\n",
      "Press 1 to continue.\n",
      "Press 2 to exit.\n",
      "1\n",
      "what you want you do?\n",
      "Press 1 to display the books in the library.\n",
      "Press 2 to lend a book from library.\n",
      "Press 3 to return a book.(Return the book in given time to ignore late fine)\n",
      "Press 4 to add a book.\n",
      "1\n",
      "Srihari Rajagopal library has: \n",
      "python\n",
      "Let us C\n",
      "C++\n",
      "compiler design\n",
      "java\n",
      "web designing\n",
      "Want something more?\n",
      "Press 1 to continue.\n",
      "Press 2 to exit.\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "from win32com.client import Dispatch\n",
    "\n",
    "class library:\n",
    "\n",
    "    def __init__(self, list, name):\n",
    "\n",
    "        self.book_list = list\n",
    "        self.name = name\n",
    "        self.lend_dict = {}\n",
    "\n",
    "    def display_books(self):\n",
    "        print(f\"{self.name} library has: \")\n",
    "        for books in self.book_list:\n",
    "            print(books)\n",
    "\n",
    "    def lend_book(self, user, book):\n",
    "\n",
    "        if book not in self.lend_dict.keys():\n",
    "            self.lend_dict.update({book: user})\n",
    "            print('Database updated . you can now lend the book.')\n",
    "\n",
    "        else:\n",
    "            print(f\"the book is already lend by {self.lend_dict[book]}.\")\n",
    "\n",
    "    def return_book(self, book):\n",
    "        if book not in self.lend_dict.keys():\n",
    "            print('Not Returnable. Check twice')\n",
    "        else:\n",
    "            self.lend_dict.pop(book)\n",
    "            print('Book returned successfuly.\\n')\n",
    "\n",
    "    def add_book(self, book):\n",
    "        self.book_list.append(book)\n",
    "        print('Book added successfully.')\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    speak = Dispatch(\"SAPI.spvoice\")\n",
    "    speak.speak(\"Welcome to the Library\")\n",
    "    print('\\t\\t **Welcome to Library** \\t\\t\\n')\n",
    "\n",
    "    obj = library([\n",
    "        'python', 'Let us C', 'C++', 'compiler design', 'java', 'web designing'], 'Srihari Rajagopal')\n",
    "\n",
    "    while True:\n",
    "\n",
    "        user = int(input(\n",
    "            \"what you want you do?\\nPress 1 to display the books in the library.\\nPress 2 to lend a book from library.\\nPress 3 to return a book.(Return the book in given time to ignore late fine)\\nPress 4 to add a book.\\n\"))\n",
    "\n",
    "        if user is 1:\n",
    "\n",
    "            obj.display_books()\n",
    "\n",
    "        elif user is 2:\n",
    "            user_name = input('Enter your name.\\n')\n",
    "            user_book = input('Enter the book name u want to lend.\\n')\n",
    "            obj.lend_book(user_name, user_book)\n",
    "\n",
    "        elif user is 3:\n",
    "            returning_book = input('Enter the book you want to return.\\n')\n",
    "            obj.return_book(returning_book)\n",
    "\n",
    "        elif user is 4:\n",
    "            adding_book = input('Enter the book you want to add.\\n')\n",
    "            obj.add_book(adding_book)\n",
    "\n",
    "        else:\n",
    "            print('Something gone wrong! Please check again.')\n",
    "\n",
    "        user_input = int(\n",
    "            input('Want something more?\\nPress 1 to continue.\\nPress 2 to exit.\\n'))\n",
    "\n",
    "        if user_input is 1:\n",
    "\n",
    "            continue\n",
    "\n",
    "        else:\n",
    "\n",
    "            exit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6b481eb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
